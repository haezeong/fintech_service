/* 전체 선택자 * */

/* *{
    color: purple;
} */

/* 태그 선택자 */ 
/* 우선순위가 제일 낮다 */
p{
    color: blue;
}

h1{
    font-size: 24px;
    text-align: center;
    color: brown;
}

#h1_id{
    color: aquamarine;
    font-size: 30px;
}
#p_id{
    text-align: center;
    color: black;
}

/* 같은게 중첩되어 있으면 가장 마지막 것이 나온다 */

/* class 선택자 .클래스명 */
.h1_class{
    color: red;
}



.p_class{
    background-color: grey;
}

.p_class2{
    text-align: center;
}

.p_class3{
    color: white;
    font-size: small;
}

/* 클래스는 점으로 연결해서 가져오고 속성에는 빈칸으로 연결 */
.p_class.p_class2.p_class3 {
    font-size: 20px;
    color: blueviolet;
    text-align: right;
}


/* 기본 속성 선택자 */
a[target="blank"]{
    /* text-align: center;
    font-size: 15px; */
    color: red;
}

/* 속성 나중에 링크 크롤링할 때 중요 -링크 =href */
a[href]{
    color: yellowgreen;
}

[href] {
    color: blue;
}


/* 지정된 속성의 값이 지정된 값을 (공백으로 분리된) 단어로 포함하는 요소를 선택 */
/* 태그[속성~= "값"] */
h2[title~="first"]{
    color: red;
}

/* 태그[속성 |="값"]
지정된 속성의 값이 일치하거나 지정된 속성 값 뒤에 하이픈(-)으로 시작하는 요소를 선택 */
h2[title|="heading"]{
    color: green;
}

/* 태그[속성^="값"] 
지정된 속성 값으로 시작하는 요소를 선택*/

a[href^="https"] {
    color: gray;
    
}

/* 태그[속성$="값"]
지정된 속성 값으로 끝나는 요소를 선택 */
a[href$=".org"] {
    color: red;
    
}

/* 태그[속성*="값"]
지정된 속성 값을 포함하는 요소를 선택 */

div[class*="test"]{
    color: red;

}

div[class~="test"]{
    background-color: yellow;
}

/* 속성으로 찾는 것이 나중에 유용하니 잘 기억해 두자 */

/* 조합 선택자 사용하기 */

p, #title, .red{
    font-size: 25px;
}

p, .p_id, #p_id2{
    font-size: 30;
    /* background-color: blueviolet; */
    color: black;
}

/* 자식을 찾는 셀렉터 */
/* 자식 선택자
부모태그 자손태그 {
}
 */
/* 태그 이름이랑 클래스이름 점으로 붙여서 사용 가능 */

/* 자손을 선택할 때는 태그 사이에 공백
조부모/부모 자식 */
div.grandfa p {
    color: red;
}

/* 자식 셀렉터는 부모태그> 자식태그 */
div.parents > p {
    color: blue;
}

/* 형제 셀렉터 형제1 + 형제2 
형제1 바로 뒤에 오는 형제2 요소를 선택*/

/* p요소의 형제 요소중에 p바로 뒤에 위치하는 ul 요소를 선택 */
/* 인접 형제 셀렉터(adjacent sibling combinator) */

.siblings1 p + ul{
    color: red;

}

/* 일반 형제 셀렉터
형제1 ~ 형제2
형제1 뒤에 위치하는 형제2요소를 모두 선택 */
.siblings2 p ~ ul {
    color: orange;
}

 /* 링크 셀렉터 
 상태가 총4가지 있다
 :link 셀렉터가 방문하지 않은 링크일 때
 :visited 셀렉터가 방문한 링크일 때
 :hover 셀렉터에 마우스가 올라와 있을 때
 :active 셀렉터가 클릭된 상태일 때
 :focus 셀렉터에 포커스가 들어와 있을 때*/

 a:link {
    color: orange;

 }
 a:visited {
    color: green;
 }
 a:hover {
    font-weight: bold;
 }
 a:active {
    color: blue;
 }


 /* input창에 focus가 들어와 있을 때 */
 input[type=text] :focus {
    color: red;
 }


 /* 구조 가상 클래스 셀렉터 */
div.structural p:first-child {
    color: red;
}

div.structural p:last-child {
    color: blue;
}

/* :nth-child(n) : 셀렉터에 해당하는 모든 요소 중 앞에서 N번째인 자식요소를 선택
, nth-last-child(n) : 셀렉터에 해당하는 모든 요소 중 뒤에서 n번째 자식인 요소를 선택 */

/* n=0, 짝수 2n, 홀수 2n+1 */
div.nth_child ol > li:nth-child(2n){
    color: orange;
}

div.nth_child ol > li:nth-child(2n+1){
    color: red;
}

div.nth_child ul > li:nth-child(4){
    color: green;
}

div.nth_child ul > li:nth-last-child(2n){
    font-size: 20px;
}

/* :first-of-type : 셀렉터에 해당하는 요소의 부모 요소의 자식 중에서 첫번째로 등장하는 요소를 선택
    : last of type : 셀렉터에 해당하는 요소의 부모 요소의 자식 중 마지막에 등장하는 요소를 선택
    : nth-of-type : 셀렉터에 해당하는 요소의 부모 요소의 자식 중 앞에서 n번째에 등장하는 요소를 선택
    : :nth-last-of-type(n) : 셀렉터에 해당하는 요소의 부모 요소의 자식 중 뒤에서 n번째에 등장하는 요소를 선택
    */

div.of_type p:first-of-type {
    color: red;
}
div.of_type p:last-of-type {
    color: blue;
}
/* last child과 같다 */

div.of_type p:nth-of-type(2) {
    color: green;
}
/* nth child와 다른점? */

div.of_type p:nth-of-type(2n+1) {
    font-size: 20px;
    color : brown;
}
div.of_type p:nth-last-of-type(2) {
    font-size: 10px;
    color : grey;
}

/* 정합성 체크 셀렉터
:valid : 정합성 검증이 성공한 input요소/form요소를 선택
:invalid: 정합성 검증이 실패한 input요소/form요소를 선택 */

div.validity input[type="text"]:valid {
    background-color: greenyellow;
}

div.validity input[type="text"]:invalid{
    background-color: red;
}

/* 가상요소 셀렉터
    ::first-letter : 콘텐츠의 첫 글자를 선택
    ::first-line : 콘텐츠의 첫 줄을 선택, 인라인 요소는 안되고, 블록요소만 적용
    ::after : 콘텐츠의 뒤에 공간을 선택, content와 함께 사용
    ::before : 콘텐츠의 앞에 공간을 선택, content와 함께 사용
    ::selection : 드래그한 콘텐츠를 선택
    */

    div.pseudo_ele p::first-letter{
        font-size: 3em;
    }

    div.pseudo_ele p::first-line{
        color: red;
    }

    div.pseudo_ele h2::before{
        content: "HTML!!!";
        color: blue;
    }

    div.pseudo_ele h2::after{
        content: "CSS!!!";
        color: red;
    }

    /* 드래그한 부분 선택 */
    div.pseudo_ele ::selection {
        color: red;
        background: yellow;
    }
